knitr::opts_chunk$set(echo = TRUE,"encoding=UTF8")
library(readxl)
datwins19 <- read_excel("./Datos-20221102/datwins19.xlsx")
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
#Estamos interesados en peso1 s?lo en el caso de las ni?as, por tanto para elegir el subconjunto del banco de datos la variable de inter?s en el caso de las ni?as, hacemos:
dim(datwins19)
peso1F<-subset(datwins19$peso1, datwins19$sexo=="girl")
length(peso1F)
summary(peso1F)
#Estamos interesados en peso1 s?lo en el caso de las ni?as, por tanto para elegir el subconjunto del banco de datos la variable de inter?s en el caso de las ni?as, hacemos:
dim(datwins19)
peso1F<-subset(datwins19$peso1, datwins19$sexo=="girl")
length(peso1F)
summary(peso1F)
View(datwins19)
#Como el tamaño de la muestra es mayor que 30, podemos construir un intervalo de confianza para saber entre qué límites está la media poblacional de la variable peso1 en las niñas con una confianza del 95% (por ejemplo).
t.test(peso1F,alernative="two.sided")
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
#Como es en ni?as prematuras, hay que calcular el subconjunto de ni?as y prematuras
peso1FP<-subset(datwins19$peso1, datwins19$sexo=="girl" & datwins19$prematuro=="Si")
length(peso1FP)
summary(peso1FP)
#com el tama?o de la muestra es menor que $30$ no podemos suponer aplicar el TCL y tendremos que comprobar si la variable $X\sim N(\mu,\sigma$, que mide el peso en las ni?as prematuras (definir el contraste de hip?tesis)
shapiro.test(peso1FP)
#c?mo el p_valor es mayor que 0.05 no rechazamos $H_0$ y por tanto $X\sim N(\mu,\sigma$
t.test(peso1FP, alternative = "less", mu=2, conf.level = 0.95)
library(ggplot2)
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
ggplot(peso1F)+geom_histogram()
Viwe(peso1F)
View(peso1F)
peso1F<-as.data.frame(peso1F)
View(peso1F)
ggplot(peso1F)+geom_histogram()
ggplot(peso1F, aes(x1:43, y=peso1F))+geom_histogram()
ggplot(peso1F, aes(x=1:43, y=peso1F))+geom_histogram()
ggplot(peso1F, aes(y=peso1F))+geom_histogram()
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
classpeso1F
class(peso1F)
knitr::opts_chunk$set(echo = TRUE,"encoding=UTF8")
library(readxl)
library(ggplot2)
datwins19 <- read_excel("./Datos-20221102/datwins19.xlsx")
#Estamos interesados en peso1 sólo en el caso de las niñas, por tanto para elegir el subconjunto del banco de datos la variable de interés en el caso de las niñas, hacemos:
dim(datwins19)
peso1F<-subset(datwins19$peso1, datwins19$sexo=="girl")
length(peso1F)
summary(peso1F)
#Como el tamaño de la muestra es mayor que 30, podemos construir un intervalo de confianza para saber entre qué límites está la media poblacional de la variable peso1 en las niñas con una confianza del 95% (por ejemplo).
t.test(peso1F,alernative="two.sided")
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
peso1F<-
ggplot(as.data.frame(peso1F), aes(x=as.data.frame(peso1F)))+geom_histogram()
peso1F<-
ggplot(as.data.frame(peso1F), aes(x=as.data.frame(peso1F)))+geom_histogram()
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
knitr::opts_chunk$set(echo = TRUE,"encoding=UTF8")
library(readxl)
library(ggplot2)
datwins19 <- read_excel("./Datos-20221102/datwins19.xlsx")
#Estamos interesados en peso1 sólo en el caso de las niñas, por tanto para elegir el subconjunto del banco de datos la variable de interés en el caso de las niñas, hacemos:
dim(datwins19)
peso1F<-subset(datwins19$peso1, datwins19$sexo=="girl")
length(peso1F)
summary(peso1F)
#Como el tamaño de la muestra es mayor que 30, podemos construir un intervalo de confianza para saber entre qué límites está la media poblacional de la variable peso1 en las niñas con una confianza del 95% (por ejemplo).
t.test(peso1F,alernative="two.sided")
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
ggplot(as.data.frame(peso1F), aes(x=as.data.frame(peso1F)))+geom_histogram()
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
ggplot(as.data.frame(peso1F), aes(x=peso1F))+geom_histogram()
#Como es en niñas prematuras, hay que calcular el subconjunto de niñas y prematuras
peso1FP<-subset(datwins19$peso1, datwins19$sexo=="girl" & datwins19$prematuro=="Si")
length(peso1FP)
summary(peso1FP)
#como el tamaño de la muestra es menor que $30$ no podemos suponer normalidad y aplicar el TCL y tendremos que comprobar si la variable $X\sim N(\mu,\sigma$, que mide el peso en las niñas prematuras (definir el contraste de hipótesis)
shapiro.test(peso1FP)
#c?mo el p_valor es mayor que 0.05 no rechazamos $H_0$ y por tanto $X\sim N(\mu,\sigma$
t.test(peso1FP, alternative = "less", mu=2, conf.level = 0.95)
#como el p_valor es mayor que 0.05 no rechazamos $H_0$ y por tanto $X\sim N(\mu,\sigma$
p<-t.test(peso1FP, alternative = "less", mu=2, conf.level = 0.95)
View(p)
#Como es en niñas prematuras, hay que calcular el subconjunto de niñas y prematuras
peso1FP<-subset(datwins19$peso1, datwins19$sexo=="girl" & datwins19$prematuro=="Si")
length(peso1FP)
summary(peso1FP)
#como el tamaño de la muestra es menor que $30$ no podemos suponer normalidad y aplicar el TCL y tendremos que comprobar si la variable $X\sim N(\mu,\sigma$, que mide el peso en las niñas prematuras (definir el contraste de hipótesis)
shapiro.test(peso1FP)
#como el p_valor es mayor que 0.05 no rechazamos $H_0$ y por tanto $X\sim N(\mu,\sigma$
t.test(peso1FP, alternative = "less", mu=2000, conf.level = 0.95)
length(datwins19)
?t.test
chisq.test(datwins19$peso1, datwins19$peso2)
?chisq.test
?t.test
?levene
?leveneTest
library(car)
?leveneTest
# Comprobaremos con el test de Levene si podemos asumir la igualdad de varianzas
juntos<-rbind(datwins19$peso1,datwins19$peso2)
View(juntos)
# Comprobaremos con el test de Levene si podemos asumir la igualdad de varianzas
juntos<-cbind(datwins19$peso1,datwins19$peso2)
View(juntos)
library(dplyr)
?gather
library(tidyr)
?gather
# Comprobaremos con el test de Levene si podemos asumir la igualdad de varianzas
juntos<-gather(datwins19, key="Tipo",value="Peso", peso1, peso2)
View(juntos)
View(juntos)
leveneTest(juntos$Peso, group=juntos$Tipo)
juntos$Tipo<-as.factor(juntos$Tipo)
View(juntos)
leveneTest(juntos$Peso, group=juntos$Tipo)
t.test(datwins19$peso1, datwins19$peso2, paired=TRUE, var.equal=TRUE)
t.test(datwins19$peso1, datwins19$peso2, paired=TRUE, var.equal=TRUE, alternative="greater")
lm(peso1~., data=datwins19)
?lm
lm(peso1~., data=datwins19)
datwins19$peso1
View(datwins19)
class(sexo)
class(datwins19$sexo)
datwins19$sexo<-as.factor(datwins19$sexo)
lm(peso1~sexo, data=datwins19)
class(datwins19$sexo)
str(datwins19$sexo)
lm(peso1~sexo, data=datwins19)
fit.s<-summary(fit)
fit<-lm(peso1~sexo, data=datwins19)
fit.s<-summary(fit)
fit.s
fit<-lm(peso1~., data=datwins19)
juntos$sexo<-as.factor(juntos$sexo)
juntos$sexo%>%group_by(sexo)
juntos%>%group_by(sexo)
unique(datwins19$sexo)
juntos%>%remove_na(sexo)%>%group_by(sexo)
juntos%>%drop_na(sexo)%>%group_by(sexo)
por_sexo<-juntos%>%drop_na(sexo)%>%group_by(sexo)
por_sexo<-juntos%>%drop_na(sexo)%>%group_by(sexo)%>%filter(Tipo=="peso1")
por_sexo
View(por_sexo)
# Eliminamos las observaciones que no contienen información sobre el sexo
juntos$sexo<-as.factor(juntos$sexo)
masc<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo="boy")
# Eliminamos las observaciones que no contienen información sobre el sexo
juntos$sexo<-as.factor(juntos$sexo)
masc<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo=="boy")
fem<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo=="girl")
chisq.test(masc, fem)
masc
# Eliminamos las observaciones que no contienen información sobre el sexo
juntos$sexo<-as.factor(juntos$sexo)
masc<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo=="boy")
fem<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo=="girl")
chisq.test(masc$Peso, fem$Peso)
juntos$Peso%>%filter(Tipo=="peso1")%>%
leveneTest(group=juntos$sexo)
juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)%>%
leveneTest(group=juntos$sexo)
juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)
juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)%>%
leveneTest(.,group=sexo)
juntos_sexo<-juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)%>%
juntos_sexo<-juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)
juntos_sexo<-juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)
leveneTest(juntos_sexo, group=sexo)
leveneTest(juntos$sexo, group=sexo)
leveneTest(juntos_sexo$Peso, group=juntos_sexo$sexo)
# Eliminamos las observaciones que no contienen información sobre el sexo
juntos$sexo<-as.factor(juntos$sexo)
juntos<-juntos%>%drop_na(sexo)
# Supondremos que las muestras ahora son independientes, ya que se
# trata de bebés diferentes nacidos en partos distintos gestados por
# madres diferentes.
juntos_sexo<-juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)
leveneTest(juntos_sexo$Peso, group=juntos_sexo$sexo)
# Como el p-valor obtenido es alto, no rechazamos la hipótesis nula es
# decir, asumimos la igualdad de las varianzas.
t.test(datwins19$peso1, datwins19$peso2, paired=TRUE, var.equal=TRUE, alternative="greater")
?t.test
t.test(masc, fem, paired=FALSE, var.equal=TRUE, alternative="two.sided")
View(masc)
t.test(masc$Peso, fem$Peso, paired=FALSE, var.equal=TRUE, alternative="two.sided")
knitr::opts_chunk$set(echo = TRUE,"encoding=UTF8")
library(readxl)
library(ggplot2)
library(car)
datwins19 <- read_excel("./Datos-20221102/datwins19.xlsx")
#Estamos interesados en peso1 sólo en el caso de las niñas, por tanto para elegir el subconjunto del banco de datos la variable de interés en el caso de las niñas, hacemos:
dim(datwins19)
peso1F<-subset(datwins19$peso1, datwins19$sexo=="girl")
length(peso1F)
summary(peso1F)
#Como el tamaño de la muestra es mayor que 30, podemos construir un intervalo de confianza para saber entre qué límites está la media poblacional de la variable peso1 en las niñas con una confianza del 95% (por ejemplo).
t.test(peso1F,alernative="two.sided")
#Realizamos el test de Shapiro Wilk para saber si la variable peso1 en niñas sigue una distribución normal de media mu y dt sigma
shapiro.test(peso1F)
ggplot(as.data.frame(peso1F), aes(x=peso1F))+geom_histogram()
#Como es en niñas prematuras, hay que calcular el subconjunto de niñas y prematuras
peso1FP<-subset(datwins19$peso1, datwins19$sexo=="girl" & datwins19$prematuro=="Si")
length(peso1FP)
summary(peso1FP)
#como el tamaño de la muestra es menor que $30$ no podemos suponer normalidad y aplicar el TCL y tendremos que comprobar si la variable $X\sim N(\mu,\sigma$, que mide el peso en las niñas prematuras (definir el contraste de hipótesis)
shapiro.test(peso1FP)
#como el p_valor es mayor que 0.05 no rechazamos $H_0$ y por tanto $X\sim N(\mu,\sigma$
t.test(peso1FP, alternative = "less", mu=2000, conf.level = 0.95)
# Como tenemos 66 muestras, supondremos la normalidad de los datos y pasaremos a
# aplicar el t.test. Primero corrobaremos que las muestras están emperejadas con
# el test Chi-cuadrado
chisq.test(datwins19$peso1, datwins19$peso2)
# Al obtener un p-valor inferior a 0.05, rechazamos la hipótesis nula del test de
# que las muestras sean independientes
# Comprobaremos con el test de Levene si podemos asumir la igualdad de varianzas
juntos<-gather(datwins19, key="Tipo",value="Peso", peso1, peso2)
juntos$Tipo<-as.factor(juntos$Tipo)
leveneTest(juntos$Peso, group=juntos$Tipo)
# Como el p-valor obtenido es alto, no rechazamos la hipótesis nula es
# decir, asumimos la igualdad de las varianzas.
t.test(datwins19$peso1, datwins19$peso2, paired=TRUE, var.equal=TRUE, alternative="greater")
View(juntos)
# Eliminamos las observaciones que no contienen información sobre el sexo
juntos$sexo<-as.factor(juntos$sexo)
masc<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo=="boy")
fem<-juntos%>%drop_na(sexo)%>%filter(Tipo=="peso1" & sexo=="girl")
# Supondremos que las muestras ahora son independientes, ya que se
# trata de bebés diferentes nacidos en partos distintos gestados por
# madres diferentes.
juntos_sexo<-juntos%>%filter(Tipo=="peso1")%>%select(Peso, sexo)
leveneTest(juntos_sexo$Peso, group=juntos_sexo$sexo)
# Como el p-valor obtenido es alto, no rechazamos la hipótesis nula es
# decir, asumimos la igualdad de las varianzas.
t.test(masc$Peso, fem$Peso, paired=FALSE, var.equal=TRUE, alternative="two.sided")
#Si queremos poner las etiquetas a la variable sges, hay que convertir la variable original a un factor y luego proceder a etiquetarla. Como regla general, se recomienda no alterar la variable original y más bien grabar las transformaciones en una nueva variable. Las etiquetas deben ir en el orden indicado por el código correspondiente de la variable.
datwins19$CatSGES[datwins19$sges<=33] <-1
datwins19$CatSGES[datwins19$sges>33 & datwins19$sges<=37] <-2
datwins19$CatSGES[datwins19$sges>37] <- 3
datwins19$CatSGES<-factor(datwins19$CatSGES, labels = c("muy prematuro", "prematuro", "no prematuro"))
table(datwins19$CatSGES)
#Normalidad:
tapply(datwins19$peso1,datwins19$CatSGES,shapiro.test)
#igualdad varianzas
#install.packages("car")
library("car")
leveneTest(datwins19$peso1,datwins19$CatSGES)
?aov
?anova
test<-aov(peso1~CatSGES, data=datwins19)
summary(test)
